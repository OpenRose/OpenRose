@*
 * OpenRose - Requirements Management
 * Licensed under the Apache License, Version 2.0.
 * Export Records UI with details preview for all 6 record types.
*@

@page "/goto"
@using MudBlazor
@inject NavigationManager NavManager

<MudPaper Class="pa-3 mb-3 align-start d-flex" Style="width: auto " Outlined="false">
    <MudStack Row="true" Spacing="3">
        <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Large" />
        <MudText Typo="Typo.h5" Align="Align.Left">Go To Record</MudText>
        <MudSpacer />
        <MudText Class="mt-3" Typo="Typo.caption">
            Quickly navigate to any record in the hierarchy by pasting its GUID. Choose "TreeView" to see the full structure or "Detail View" for focused details and breadcrumbs.
        </MudText>
    </MudStack>
</MudPaper>

<MudItem xs="12" Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3">
    <MudPaper Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3" Style="padding: 16px;">
        <MudStack Row="false" Spacing="3" AlignItems="AlignItems.Center" JustifyContent="Justify.Center" Class="w-100">
            <MudText Align="Align.Center" Typo="Typo.body1">
                Enter the GUID of the record you want to navigate to:
            </MudText>
            <MudTextField @bind-Value="targetGuidText"
                          Placeholder="Paste or enter GUID here"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          Style="min-width: 420px"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Keyboard" />

            <MudRadioGroup T="string" @bind-SelectedOption="selectedViewOption" Row="true">
                <MudRadio Value="@("TreeView")" Color="Color.Primary">TreeView</MudRadio>
                <MudRadio Value="@("DetailView")" Color="Color.Primary">Detail View</MudRadio>
            </MudRadioGroup>

            <MudButton Variant="Variant.Filled"
                       Size="Size.Medium"
                       Color="Color.Primary"
                       Disabled="@(!IsGuidInputValid())"
                       OnClick="GoToRecord">
                Go To
            </MudButton>
        </MudStack>
    </MudPaper>
</MudItem>

@code 
{
    private string targetGuidText { get; set; } = string.Empty;
    private string selectedViewOption { get; set; } = "TreeView";

    private bool IsGuidInputValid()
        => Guid.TryParse(targetGuidText, out _);

    private void GoToRecord()
    {
        // TODO: We have to check that provided GUID exists in the system and it's one of the following types:
        // Project, ItemzType, Itemz, Baseline, BaselineItemzType, BaselineItemz
        // We allow users to navigate to any of these record types from this page.

        if (!IsGuidInputValid())
            return;

        var guid = targetGuidText.Trim();
        if (selectedViewOption == "TreeView")
        {
            // TODO: Currently in application we allow moving from DetailView into TreeView.
            // As part of this enhancement request, we should try and utilize similar logic.
            // For example, if we are already in TreeView and the record is visible, we should highlight it.
            NavManager.NavigateTo($"/treeview?recordId={guid}");
        }
        else if (selectedViewOption == "DetailView")
        {
            // TODO: Currently in application we allow moving from TreeView into DetailView.
            // As part of this enhancement request, we should try and utilize similar logic.
            // For example, if we are already in DetailView and the record is visible, we should highlight it.
            NavManager.NavigateTo($"/detailview?recordId={guid}");
        }
    }

    // private async Task GoToRecord()
    // {
    //     if (!IsGuidInputValid(targetGuidText))
    //         return;

    //     var guid = Guid.Parse(targetGuidText.Trim());

    //     // 1. Query hierarchy for record type
    //     var record = await HierarchyService.GetHierarchyByIdAsync(guid); // Calls /api/Hierarchy/{guid}
    //     if (record == null || string.IsNullOrWhiteSpace(record.RecordType))
    //     {
    //         await DialogService.ShowMessageBox("ERROR", markupMessage: new MarkupString("Record not found."), yesText: "OK");
    //         return;
    //     }

    //     string url = null;

    //     // 2. Determine navigation based on record type + view
    //     switch (record.RecordType)
    //     {
    //         case "Project":
    //             url = selectedViewOption == "TreeView"
    //                 ? $"/projectTreeView/{guid}"
    //                 : $"/project/{guid}";
    //             break;

    //         case "ItemzType":
    //             // Get parents to find ProjectId (level 1)
    //             var parents = await HierarchyService.GetAllParentsAsync(guid); // Calls /api/Hierarchy/GetAllParents/{guid}
    //             var project = parents?.FirstOrDefault(p => p.Level == 1 && p.RecordType == "Project");
    //             if (project != null)
    //             {
    //                 url = selectedViewOption == "TreeView"
    //                     ? $"/projectTreeView/{project.RecordId}" // Show full tree for Project context
    //                     : $"/itemzType/{guid}";
    //             }
    //             break;

    //         case "Itemz":
    //             // Get parents to find ProjectId (level 1)
    //             var itemzParents = await HierarchyService.GetAllParentsAsync(guid);
    //             var itemzProject = itemzParents?.FirstOrDefault(p => p.Level == 1 && p.RecordType == "Project");
    //             if (itemzProject != null)
    //             {
    //                 url = selectedViewOption == "TreeView"
    //                     ? $"/projectTreeView/{itemzProject.RecordId}" // Show full tree for Project
    //                     : $"/itemz/{guid}";
    //             }
    //             break;

    //         // Repeat similar logic for Baseline, BaselineItemzType, BaselineItemz
    //         // Example for BaselineItemz:
    //         case "BaselineItemz":
    //             var baselineParents = await HierarchyService.GetAllParentsAsync(guid);
    //             var baselineProject = baselineParents?.FirstOrDefault(p => p.Level == 1 && p.RecordType == "Project");
    //             if (baselineProject != null)
    //             {
    //                 url = selectedViewOption == "TreeView"
    //                     ? $"/projectTreeView/{baselineProject.RecordId}" // Or specialized baseline tree view if exists
    //                     : $"/baselineItemz/{guid}";
    //             }
    //             break;

    //         default:
    //             await DialogService.ShowMessageBox("ERROR", markupMessage: new MarkupString("Unsupported record type."), yesText: "OK");
    //             return;
    //     }

    //     if (url != null)
    //         NavManager.NavigateTo(url);
    //     else
    //         await DialogService.ShowMessageBox("ERROR", markupMessage: new MarkupString("Could not determine navigation path."), yesText: "OK");
    // }
}