name: Build and Deploy

on:
  push:
    branches:
      - main
      - Alpha**
      - Beta**
  pull_request:
    branches:
      - main
      - Alpha**
      - Beta**
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Whether to create a release (true/false)'
        required: true
        default: 'false'
      ref:
        description: 'Branch to run the workflow against'
        required: true
        default: 'refs/heads/main'
        type: choice
        options: 
          - refs/heads/main
          - refs/heads/Alpha**
          - refs/heads/Beta**
          - refs/heads/HotFix**

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [win-x64, win-x86]

    outputs:
      BuildOutputSimpleVersion_win-x64: ${{ steps.set_env.outputs.SimpleVersion_win-x64 }}
      BuildOutputEscapedBranchName_win-x64: ${{ steps.set_env.outputs.EscapedBranchName_win-x64 }}
      BuildOutputSimpleVersion_win-x86: ${{ steps.set_env.outputs.SimpleVersion_win-x86 }}
      BuildOutputEscapedBranchName_win-x86: ${{ steps.set_env.outputs.EscapedBranchName_win-x86 }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  ## Fetch the entire history
        persist-credentials: true  # Ensure credentials persist for pushing

    - name: Fetch all tags and branches
      run: |
        git fetch --all --tags

    - name: List all Git tags
      run: git tag -l

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.x' # Adjust to the version of .NET you are using

    - name: Install GitVersion
      run: dotnet tool install --global GitVersion.Tool

    - name: Add GitVersion to PATH
      run: echo "/home/runner/.dotnet/tools" >> $GITHUB_PATH

    - name: Set up Git user
      run: |
        git config --global user.email "openroserm@outlook.com"
        git config --global user.name "OpenRose Requirements Management"

    - name: Restore dependencies
      run: dotnet restore

    - name: Calculate Version with Diagnostics to File
      id: set_env
      run: |
        echo "Running dotnet-gitversion with diagnostics..."
        dotnet-gitversion /diag > gitversion_diagnostics.log
        FullSemVer=$(dotnet-gitversion /showvariable FullSemVer 2>&1 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+') || {
          echo "dotnet-gitversion failed with the following output:"
          echo "$FullSemVer"
          exit 1
        }
        AssemblySemFileVer=$(dotnet-gitversion /showvariable AssemblySemFileVer 2>&1 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+') || {
          echo "dotnet-gitversion failed with the following output:"
          echo "$AssemblySemFileVer"
          exit 1
        }
        AssemblySemVer=$(dotnet-gitversion /showvariable AssemblySemVer 2>&1 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+') || {
          echo "dotnet-gitversion failed with the following output:"
          echo "$AssemblySemVer"
          exit 1
        }
        EscapedBranchName=$(dotnet-gitversion /showvariable EscapedBranchName 2>&1 | grep -v '^INFO') || {
          echo "dotnet-gitversion failed with the following output:"
          echo "$EscapedBranchName"
          exit 1
        }
        BuildMetaData=$(dotnet-gitversion /showvariable BuildMetaData 2>&1 | grep -v '^INFO')
        SimpleVersion="v${AssemblySemVer}"  # Add 'v' prefix
        FullSemVerWithBuild="v${FullSemVer}+${BuildMetaData}"  # Add 'v' prefix
        DateTimeStamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "SimpleVersion calculated: $SimpleVersion"
        echo "FullSemVerWithBuild calculated: $FullSemVerWithBuild"
        echo "DateTimeStamp: $DateTimeStamp"
        echo "SimpleVersion=$SimpleVersion" >> $GITHUB_ENV
        echo "FullSemVerWithBuild=$FullSemVerWithBuild" >> $GITHUB_ENV
        echo "EscapedBranchName=$EscapedBranchName" >> $GITHUB_ENV
        echo "DateTimeStamp=$DateTimeStamp" >> $GITHUB_ENV
        echo "VERSION: $FullSemVerWithBuild"
        echo "Updating AssemblyInfo with AssemblySemVer: $AssemblySemVer and AssemblyFileVersion: $AssemblySemFileVer and FullSemVerWithBuild: $FullSemVerWithBuild"
        FULL_BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME=$(echo $FULL_BRANCH_NAME | sed 's/\//-/g' | sed 's/-/_/g')
        COMMIT_SHA=${GITHUB_SHA}
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyVersion(\".*\")\]/\[assembly: AssemblyVersion(\"${AssemblySemVer}\")\]/g" {} +
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyFileVersion(\".*\")\]/\[assembly: AssemblyFileVersion(\"${AssemblySemFileVer}\")\]/g" {} +
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyInformationalVersion(\".*\")\]/\[assembly: AssemblyInformationalVersion(\"${FullSemVerWithBuild}\")\]/g" {} +
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyMetadata(\"BranchName\", \".*\")\]/\[assembly: AssemblyMetadata(\"BranchName\", \"${BRANCH_NAME}\")\]/g" {} +
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyMetadata(\"CommitSha\", \".*\")\]/\[assembly: AssemblyMetadata(\"CommitSha\", \"${COMMIT_SHA}\")\]/g" {} +
        find . -name "AssemblyInfo.cs" -exec sed -i "s/\[assembly: AssemblyMetadata(\"BuildDateTime\", \".*\")\]/\[assembly: AssemblyMetadata(\"BuildDateTime\", \"${DateTimeStamp}\")\]/g" {} +
        if [ "${{ matrix.platform }}" == "win-x64" ]; then
          echo "SimpleVersion_win-x64=$SimpleVersion" >> $GITHUB_OUTPUT
          echo "EscapedBranchName_win-x64=$EscapedBranchName" >> $GITHUB_OUTPUT
        else
          echo "SimpleVersion_win-x86=$SimpleVersion" >> $GITHUB_OUTPUT
          echo "EscapedBranchName_win-x86=$EscapedBranchName" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build API
      run: dotnet build OpenRose.API/OpenRose.API.csproj --configuration Release --runtime ${{ matrix.platform }}

    - name: Build WebUI Client
      run: dotnet build OpenRose.Web/OpenRose.WebUI.Client/OpenRose.WebUI.Client.csproj --configuration Release --runtime ${{ matrix.platform }}

    - name: Build WebUI
      run: dotnet build OpenRose.Web/OpenRose.WebUI/OpenRose.WebUI.csproj --configuration Release --runtime ${{ matrix.platform }}

    - name: Create WebDeployment Packages
      run: |
        echo "Setting VERSION environment variable"
        VERSION=${{ env.SimpleVersion }}
        echo "VERSION: $VERSION"
        dotnet publish OpenRose.API/OpenRose.API.csproj -c Release -o ./package/OpenRose.API --runtime ${{ matrix.platform }}
        dotnet publish OpenRose.Web/OpenRose.WebUI.Client/OpenRose.WebUI.Client.csproj -c Release -o ./package/OpenRose.WebUI.Client --runtime ${{ matrix.platform }}
        dotnet publish OpenRose.Web/OpenRose.WebUI/OpenRose.WebUI.csproj -c Release -o ./package/OpenRose.WebUI --runtime ${{ matrix.platform }}
        cp -r ./package/OpenRose.WebUI.Client/* ./package/OpenRose.WebUI/

    - name: Copy Custom web.config
      run: cp -f OpenRose.Web/OpenRose.WebUI/web.config ./package/OpenRose.WebUI/web.config

    - name: Display Custom web.config content
      run: cat ./package/OpenRose.WebUI/web.config

    - name: Copy AssemblyInfo to Package
      run: |
        mkdir -p ./package/OpenRose.API/Properties
        mkdir -p ./package/OpenRose.WebUI/Properties
        cp OpenRose.API/Properties/AssemblyInfo.cs ./package/OpenRose.API/Properties/
        cp OpenRose.Web/OpenRose.WebUI/Properties/AssemblyInfo.cs ./package/OpenRose.WebUI/Properties/

    - name: Zip WebDeployment Packages
      run: |
        VERSION=${{ env.SimpleVersion }}
        mkdir -p ./package
        echo "Zipping OpenRose.API with VERSION: $VERSION"
        cd ./package/OpenRose.API && zip -r ../${{ matrix.platform }}-OpenRose.API-${VERSION}.zip . && cd ../..
        echo "Zipping OpenRose.WebUI with VERSION: $VERSION"
        cd ./package/OpenRose.WebUI && zip -r ../${{ matrix.platform }}-OpenRose.WebUI-${VERSION}.zip . && cd ../..

    - name: List package directory contents
      run: ls -la ./package

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenRose-package-${{ env.SimpleVersion }}-${{ env.EscapedBranchName }}-${{ matrix.platform }}
        path: ./package/*.zip
        retention-days: 30  # Set the retention period to 30 days (adjust as needed)

    - name: Upload GitVersion Diagnostics
      uses: actions/upload-artifact@v4
      with:
        name: gitversion-diagnostics-${{ matrix.platform }}
        path: gitversion_diagnostics.log

  create_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Git user
      run: |
        git config --global user.email "openroserm@outlook.com"
        git config --global user.name "OpenRose Requirements Management"

    - name: Set Environment Variables
      run: |
        echo "SimpleVersion_win-x64=${{ needs.build.outputs.BuildOutputSimpleVersion_win-x64 }}" >> $GITHUB_ENV
        echo "EscapedBranchName_win-x64=${{ needs.build.outputs.BuildOutputEscapedBranchName_win-x64 }}" >> $GITHUB_ENV
        echo "SimpleVersion_win-x86=${{ needs.build.outputs.BuildOutputSimpleVersion_win-x86 }}" >> $GITHUB_ENV
        echo "EscapedBranchName_win-x86=${{ needs.build.outputs.BuildOutputEscapedBranchName_win-x86 }}" >> $GITHUB_ENV
        echo "SimpleVersion calculated for win-x64: ${{ needs.build.outputs.BuildOutputSimpleVersion_win-x64 }}"
        echo "EscapedBranchName calculated for win-x64: ${{ needs.build.outputs.BuildOutputEscapedBranchName_win-x64 }}"
        echo "SimpleVersion calculated for win-x86: ${{ needs.build.outputs.BuildOutputSimpleVersion_win-x86 }}"
        echo "EscapedBranchName calculated for win-x86: ${{ needs.build.outputs.BuildOutputEscapedBranchName_win-x86 }}"
        echo '${{ toJSON(needs.build.outputs) }}'
        

    - name: Download build artifacts - win-x64
      uses: actions/download-artifact@v4
      with:
        name: OpenRose-package-${{ env.SimpleVersion_win-x64 }}-${{ env.EscapedBranchName_win-x64 }}-win-x64
        path: ./artifacts/win-x64

    - name: Download build artifacts - win-x86
      uses: actions/download-artifact@v4
      with:
        name: OpenRose-package-${{ env.SimpleVersion_win-x86 }}-${{ env.EscapedBranchName_win-x86 }}-win-x86
        path: ./artifacts/win-x86

    - name: Create Tag
      run: |
        VERSION="${{ env.SimpleVersion_win-x64 }}"
        git tag -a $VERSION -m "Release $VERSION"
        git push origin $VERSION
        echo "RELEASE_TAG=$VERSION" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        body: "Automated release with updated version and deployment package."
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in ./artifacts/**/*OpenRose*.zip; do
          gh release upload ${{ env.RELEASE_TAG }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}